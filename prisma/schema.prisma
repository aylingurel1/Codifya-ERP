generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                       String            @id @default(cuid())
  email                    String            @unique
  password                 String
  name                     String
  role                     String            @default("USER")
  isActive                 Boolean           @default(true)
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  bankAccountsUpdated      BankAccount[]     @relation("BankAccountUpdater")
  bankAccountsCreated      BankAccount[]     @relation("BankAccountCreator")
  bankReportsGenerated     BankReporting[]   @relation("BankReportGenerator")
  bankTransactionsCreated  BankTransaction[] @relation("BankTransactionCreator")
  bankTransactionsApproved BankTransaction[] @relation("BankTransactionApprover")
  customers                Customer[]
  invoices                 Invoice[]
  orders                   Order[]
  products                 Product[]
  stockMovements           StockMovement[]
  transactions             Transaction[]

  @@map("users")
}

model Customer {
  id            String    @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  company       String?
  taxNumber     String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String
  createdByUser User      @relation(fields: [createdBy], references: [id])
  invoices      Invoice[]
  orders        Order[]

  @@map("customers")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  parentId    String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id             String          @id @default(cuid())
  name           String
  description    String?
  sku            String          @unique
  price          Float
  cost           Float
  stock          Int             @default(0)
  minStock       Int             @default(0)
  categoryId     String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      String
  orderItems     OrderItem[]
  createdByUser  User            @relation(fields: [createdBy], references: [id])
  category       Category?       @relation(fields: [categoryId], references: [id])
  stockMovements StockMovement[]

  @@map("products")
}

model StockMovement {
  id            String   @id @default(cuid())
  productId     String
  type          String
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String
  reference     String?
  createdBy     String
  createdAt     DateTime @default(now())
  createdByUser User     @relation(fields: [createdBy], references: [id])
  product       Product  @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  customerId    String
  status        String        @default("PENDING")
  totalAmount   Float
  taxAmount     Float         @default(0)
  discount      Float         @default(0)
  notes         String?
  orderDate     DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String
  invoices      Invoice[]
  items         OrderItem[]
  createdByUser User          @relation(fields: [createdBy], references: [id])
  customer      Customer      @relation(fields: [customerId], references: [id])
  payments      Payment[]
  transactions  Transaction[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  total     Float
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])

  @@map("order_items")
}

model Payment {
  id           String        @id @default(cuid())
  orderId      String
  amount       Float
  method       String
  status       String        @default("PENDING")
  reference    String?
  paymentDate  DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  order        Order         @relation(fields: [orderId], references: [id])
  transactions Transaction[]

  @@map("payments")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  orderId       String?
  customerId    String?
  type          String
  status        String        @default("DRAFT")
  subtotal      Float
  taxAmount     Float         @default(0)
  discount      Float         @default(0)
  totalAmount   Float
  dueDate       DateTime
  issueDate     DateTime      @default(now())
  paidDate      DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String
  createdByUser User          @relation(fields: [createdBy], references: [id])
  customer      Customer?     @relation(fields: [customerId], references: [id])
  order         Order?        @relation(fields: [orderId], references: [id])
  transactions  Transaction[]

  @@map("invoices")
}

model Transaction {
  id            String       @id @default(cuid())
  type          String
  category      String
  amount        Float
  description   String
  reference     String?
  date          DateTime     @default(now())
  invoiceId     String?
  orderId       String?
  paymentId     String?
  bankAccountId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String
  createdByUser User         @relation(fields: [createdBy], references: [id])
  bankAccount   BankAccount? @relation(fields: [bankAccountId], references: [id])
  payment       Payment?     @relation(fields: [paymentId], references: [id])
  order         Order?       @relation(fields: [orderId], references: [id])
  invoice       Invoice?     @relation(fields: [invoiceId], references: [id])

  @@map("transactions")
}

model BankAccount {
  id                    String            @id @default(uuid())
  bankName              String
  branch                String
  iban                  String            @unique
  accountNumber         String
  currency              String            @default("TRY")
  balance               Float             @default(0)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  isActive              Boolean           @default(true)
  createdBy             String?
  updatedBy             String?
  updatedByUser         User?             @relation("BankAccountUpdater", fields: [updatedBy], references: [id])
  createdByUser         User?             @relation("BankAccountCreator", fields: [createdBy], references: [id])
  bankStatements        BankStatement[]
  transactions          BankTransaction[]
  financialTransactions Transaction[]
}

model BankTransaction {
  id                String      @id @default(uuid())
  type              String
  amount            Float
  currency          String      @default("TRY")
  description       String?
  transactionDate   DateTime    @default(now())
  referenceNumber   String?     @unique
  bankAccountId     String
  targetIban        String?
  targetAccountName String?
  targetBankName    String?
  approvedBy        String?
  approvedAt        DateTime?
  createdBy         String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  createdByUser     User?       @relation("BankTransactionCreator", fields: [createdBy], references: [id])
  approvedByUser    User?       @relation("BankTransactionApprover", fields: [approvedBy], references: [id])
  bankAccount       BankAccount @relation(fields: [bankAccountId], references: [id])
}

model BankStatement {
  id               String      @id @default(uuid())
  bankAccountId    String
  statementDate    DateTime
  startDate        DateTime
  endDate          DateTime
  balanceStart     Float
  balanceEnd       Float
  statementContent Json?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  bankAccount      BankAccount @relation(fields: [bankAccountId], references: [id])

  @@unique([bankAccountId, startDate, endDate])
}

model BankReporting {
  id               String    @id @default(uuid())
  reportName       String
  reportType       String
  generatedDate    DateTime  @default(now())
  startDate        DateTime?
  endDate          DateTime?
  reportParameters Json?
  reportData       Json
  generatedBy      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  generatedByUser  User?     @relation("BankReportGenerator", fields: [generatedBy], references: [id])
}
